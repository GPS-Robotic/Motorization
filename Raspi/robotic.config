# direction.py
straight_assumption_tolerance = 0.174532925 # define tolarance in angle for straight-assumption (in radiant); 0.174532925 = 10Â°

#__________________________________________________________________________

# drive.py

#define PIN-Settings (Board-Numbering, not GPIO-Numbering)
#	actually not needed here as we use GPIO-Numbering
#PIN_Servo=11	#Servo-Signal
#PIN_Motor=7	#Motor-Signal
#PIN_SDA=3	#Kompass SDA
#PIN_SCL=5	#Kompass SCL
#PIN_TX=8	#GPS TX
#PIN_RX=10	#GPS RX

#define PIN-Settings (GPIO-Numbering, not Board-Numbering)
GPIO_Servo=17
GPIO_Motor=4
#GPIO_SDA=2	# not needed in this module
#GPIO_SCL=3
#GPIO_TX=14
#GPIO_RX=15

#define Servopositions for steering
#	values adjusted to incrementer 10us (micro-seconds)
Steering_Offset=50	#for fine-adjusting the steering
Steering_Left = 1900
Steering_Half_Left = 1700 #needed?
Steering_Straight = 1500 
Steering_Half_Right = 1300  #needed?
Steering_Right = 1100 

#define Motorvalues for driving
#	values adjusted to incrementer 10us (micro-seconds)
Motor_Offset = 0
Motor_Null = 1500
Motor_Slow = 100	#check these values!!! starts from 1550
Motor_Middle = 200
Motor_Fast = 300

#define waiting time between stop and steer in seconds
Stop_Steer_Sleeping_Time=0.5

#define time needed for 90-degrees-turn (ADJUST!)
Sleeping_Time_90=1

#__________________________________________________

# sensors.py
		# set standart-Sensor- & Servo- PINS
		# USE GPIO-NUMBERING, NOT BOARD-NUMBERING!
		sensors_TRIG = [16, 20, 21]
		sensors_ECHO = [13, 19, 26]
		sensors_SERVO = 6
		# constants for single distance-measurements
		sensors_ECHO_in_timeout = 0.5 # max. waiting-time in seconds for echo-signal to come in
		sensors_no_echo_in_value = 20000000.0 # return value if no echo is received after ECHO_in_timeout
		sensors_out_of_sight_time = 0.05 # max. waiting-time in seconds for echo-signal-duration
		sensors_out_of_sight_value = 10000000.0 # return value of distance measurement after out_of_sight_time
		sensors_relaxation_time_before = 0.04 # waiting time before measurement: to ensure sensor to be at rest
		sensors_dt_to_distance = 17000.0 # constant to convert time-difference to distance (standart: 17000cm/s; speed of sound/2)
#		sensors_relaxation_time_after = 0.04 # waiting time after measurement: to ensure no sensor overlap??
		sensors_queue_waiting_time = 1e-05 # time for waiting loop, if system is measuring and new measuring is waiting
		sensors_scan_relaxation_time = 0.3 # time between single scannings in scanning-mode
		# constants for servo-positions
		# CAUTION: HAS TO BE MULTIPLE OF 10!
		# 	   ALSO sensors_servo_segment_size HAS TO BE MULTIPLE OF 10!
		#    system-values
		sensors_servo_OFFSET = 0
		sensors_servo_NULL = 1500
		sensors_servo_MAX = 2000
		sensors_servo_MIN = 1000
		sensors_servo_segments = 10 # NOTE: There is one more measurement than segments!


#____________________________________________________

# main.py

gps_waiting_time = 0.5 # time in seconds in while-loop for waiting for valid GPS
update_time = 1 # time in seconds in while-loop for updating gps, current_status & desired_status
accuracy = 7 # when is the target reached?? accuracy in meter



#___________________________________________________

# still MISSING:

# navigation.py
# GPS_data-format
# alles in /log/
# standart-einstellungen in den files

#____________________________________________________

# additional parameters

any_output=True
GPIO_output=True
PWM_output=True
